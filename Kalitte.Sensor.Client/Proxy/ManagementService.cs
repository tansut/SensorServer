//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Kalitte.Sensors.Processing;
using System.Collections.Generic;
using Kalitte.Sensors.Configuration;
using Kalitte.Sensors.Processing.Metadata;
using System.ServiceModel;
using Kalitte.Sensors.Exceptions;
using Kalitte.Sensors.Security;
using Kalitte.Sensors.Core;
using Kalitte.Sensors.Events;
namespace System.Text.RegularExpressions
{
    using System;
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.SerializableAttribute()]
    public partial class Regex : object, System.Runtime.Serialization.ISerializable
    {

        private System.Runtime.Serialization.SerializationInfo info;

        public Regex(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            this.info = info;
        }

        public System.Runtime.Serialization.SerializationInfo SerializationInfo
        {
            get
            {
                return this.info;
            }
            set
            {
                this.info = value;
            }
        }

        public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            if ((this.SerializationInfo == null))
            {
                return;
            }
            System.Runtime.Serialization.SerializationInfoEnumerator enumerator = this.SerializationInfo.GetEnumerator();
            for (
            ; enumerator.MoveNext();
            )
            {
                System.Runtime.Serialization.SerializationEntry entry = enumerator.Current;
                info.AddValue(entry.Name, entry.Value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name = "RegexOptions", Namespace = "http://schemas.datacontract.org/2004/07/System.Text.RegularExpressions")]
    public enum RegexOptions : int
    {

        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        IgnoreCase = 1,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Multiline = 2,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExplicitCapture = 4,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Compiled = 8,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Singleline = 16,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        IgnorePatternWhitespace = 32,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        RightToLeft = 64,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        ECMAScript = 256,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        CultureInvariant = 512,
    }
}

namespace Kalitte.Sensors.Client.Proxy
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://kalitte.sensors/", ConfigurationName = "ISensorCommandService")]
    public interface ISensorCommandService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://kalitte.sensors/ISensorCommandProcessor/Execute", ReplyAction = "http://kalitte.sensors/ISensorCommandProcessor/ExecuteResponse")]

        Kalitte.Sensors.Commands.ResponseEventArgs Execute(string sensorName, string source, Kalitte.Sensors.Commands.SensorCommand command);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorCommandServiceChannel : ISensorCommandService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorCommandServiceClient : System.ServiceModel.ClientBase<ISensorCommandService>, ISensorCommandService
    {

        public SensorCommandServiceClient()
        {
        }

        public SensorCommandServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public SensorCommandServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SensorCommandServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SensorCommandServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public Kalitte.Sensors.Commands.ResponseEventArgs Execute(string sensorName, string source, Kalitte.Sensors.Commands.SensorCommand command)
        {
            return base.Channel.Execute(sensorName, source, command);
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://kalitte.sensors/", ConfigurationName = "IManagementService")]
    public interface IManagementService
    {

        #region watch

        [OperationContract, FaultContract(typeof(SensorFault))]
        NameDescriptionList GetServerWatcherCategoryNames(string watch, ServerAnalyseItem related);

        [OperationContract, FaultContract(typeof(SensorFault))]
        NameDescriptionList GetServerWatcherNames();

        [OperationContract, FaultContract(typeof(SensorFault))]
        NameDescriptionList GetServerWatcherCategories(string watch);

        [OperationContract, FaultContract(typeof(SensorFault))]
        NameDescriptionList GetServerWatcherInstanceNames(string watch, string category);

        [OperationContract, FaultContract(typeof(SensorFault))]
        NameDescriptionList GetServerWatcherMeasureNames(string watch, string category);

        [OperationContract, FaultContract(typeof(SensorFault))]
        float[] GetServerWatcherMeasureValues(string watch, string category, string instance, string[] measureNames);

        #endregion

        #region general
        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ExtendedMetadata GetItemExtendedMetadata(ProcessingItem itemType);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Dictionary<PropertyKey, EntityMetadata> GetItemDefaultMetadata(ProcessingItem itemType, string itemName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        LogQueryResult GetItemLog(ProcessingItem itemType, string itemName, LogQuery query);

        [OperationContract, FaultContract(typeof(SensorFault))]
        Dictionary<ProcessingItem, IEnumerable<string>> GetLogSources();

        [OperationContract, FaultContract(typeof(SensorFault))]
        IList<LastEvent> GetLastEvents(ProcessingItem itemType, string itemName);

        [OperationContract, FaultContract(typeof(SensorFault))]
        void SetLastEventFilter(ProcessingItem itemType, string itemName, LastEventFilter filter);

        [OperationContract, FaultContract(typeof(SensorFault))]
        LastEventFilter GetLastEventFilter(ProcessingItem itemType, string itemName);


        #endregion

        #region ProviderManagement
        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        SensorProviderEntity CreateSensorProvider(string name, string description, string type, ItemStartupType startup);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ProviderMetadata GetSensorProviderMetadata(string providerName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Kalitte.Sensors.Processing.Metadata.SensorProviderEntity[] GetSensorProviders();

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void DeleteSensorProvider(string providerName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ProviderMetadata UpdateSensorProvider(string providerName, string description, string type, SensorProviderProperty properties);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeProviderState(string providerName, ItemState newState);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Kalitte.Sensors.Processing.Metadata.SensorProviderEntity GetSensorProvider(string providerName);

        #endregion

        #region SensorManagement

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Kalitte.Sensors.Processing.Metadata.SensorDeviceEntity[] GetSensorDevicesForProvider(string providerName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Kalitte.Sensors.Processing.Metadata.SensorDeviceEntity[] GetSensorDevices();


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void CreateSensor(string sensorName, string sensorId, string description, Kalitte.Sensors.Communication.ConnectionInformation connInfo, Kalitte.Sensors.Security.AuthenticationInformation authInfo, Kalitte.Sensors.Processing.ItemStartupType startup);


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void DeleteSensor(string sensorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateSensor(string sensorName, string sensorId, string description, Kalitte.Sensors.Processing.Metadata.SensorDeviceProperty properties);


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeSensorState(string sensorName, ItemState newState);


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Dictionary<string, PropertyList> GetSensorSources(string sensorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        SensorDeviceEntity GetSensorDevice(string sensorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Dictionary<PropertyKey, DevicePropertyMetadata> GetSensorMetadata(string providerName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateSensorWithBindings(string sensorName, string sensorId, string description, SensorDeviceProperty properties,
   Logical2SensorBindingEntity[] bindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void SetSensorProfile(string sensorName, string source, PropertyList properties);

        #endregion

        #region logicalSensorManagement

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        LogicalSensorEntity[] GetLogicalSensors();

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Logical2SensorBindingEntity[] GetLogical2SensorBindings(string sensorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateLogical2SensorBindings(string sensorName, Logical2SensorBindingEntity[] bindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        LogicalSensorEntity CreateLogicalSensor(string logicalSensorName, string description, Kalitte.Sensors.Processing.ItemStartupType startup);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        LogicalSensorEntity GetLogicalSensor(string logicalSensorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeLogicalSensorState(string logicalSensorName, ItemState newState);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateLogicalSensor(string logicalSensorName, string description, LogicalSensorProperty properties);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void DeleteLogicalSensor(string logicalSensorName);

        [OperationContract, FaultContract(typeof(SensorFault))]
        Logical2SensorBindingEntity[] GetSensor2LogicalBindings(string logicalSensorName);


        #endregion

        #region processorManagement

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ProcessorEntity[] GetProcessors();

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ProcessorEntity CreateProcessor(string processorName, string description, ItemStartupType startup);


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ProcessorEntity GetProcessor(string processorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void DeleteProcessor(string processorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateProcessor(string processorName, string description, ProcessorProperty properties);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeProcessorState(string processorName, ItemState newState);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        ProcessorMetadata GetProcessorMetadata(string processorName);


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        IEnumerable<Processor2ModuleBindingEntity> GetProcessor2ModuleBindings(string processorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateProcessor2ModuleBindings(string processorName, Processor2ModuleBindingEntity[] bindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Logical2ProcessorBindingEntity[] GetProcessor2LogicalSensorBindings(string processorName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateProcessor2LogicalSensorBindings(string processorName, Logical2ProcessorBindingEntity[] bindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateProcessorWithBindings(string processorName, string description, ProcessorProperty properties,
            Processor2ModuleBindingEntity[] moduleBindings, Logical2ProcessorBindingEntity[] logicalSensorBindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeProcessorModuleState(string processorName, string moduleName, ItemState newState);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeProcessorLogicalSensorBindingState(string processorName, string logicalSensorName, ItemState newState);

        [OperationContract, FaultContract(typeof(SensorFault))]
        void SetEventModuleProfile(string processor, string module, PropertyList properties);

        #endregion

        #region eventModuleManagement

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        IEnumerable<EventModuleEntity> GetEventModules();

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        EventModuleEntity CreateEventModule(string eventModuleName,
            string description,
            string type,
            ItemStartupType startup);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void DeleteEventModule(string eventModuleName);


        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateEventModule(string eventModuleName, string description, string type, EventModuleProperty properties);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        EventModuleMetadata GetEventModuleMetadata(string eventModuleName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        EventModuleEntity GetEventModule(string eventModuleName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeEventModuleState(string eventModuleName, ItemState newState);

        #endregion

        #region dispatcherManagement

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        DispatcherEntity[] GetDispatchers();

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        DispatcherEntity GetDispatcher(string dispatcherName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeDispatcherState(string dispatcherName, ItemState newState);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        DispatcherEntity CreateDispatcher(string dispatcherName,
            string description,
            string type,
            ItemStartupType startup);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void DeleteDispatcher(string dispatcherName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateDispatcher(string dispatcherName, string description, string type, DispatcherProperty properties);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        DispatcherMetadata GetDispatcherMetadata(string dispatcherName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        Dispatcher2ProcessorBindingEntity[] GetDispatcher2ProcessorBindings(string dispatcherName);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateDispatcher2ProcessorBindings(string dispatcherName, Dispatcher2ProcessorBindingEntity[] bindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void UpdateDispatcherWithBindings(string dispatcherName, string description, string type, DispatcherProperty properties,
            Dispatcher2ProcessorBindingEntity[] processorBindings);

        [System.ServiceModel.OperationContract, FaultContract(typeof(SensorFault))]
        void ChangeDispatcherProcessorBindingState(string dispatcherName, string processorName, ItemState newState);


        [OperationContract, FaultContract(typeof(SensorFault))]
        void SetDispatcherProfile(string dispatcher, PropertyList properties);

        #endregion




    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagementServiceChannel : IManagementService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagementServiceClient : System.ServiceModel.ClientBase<IManagementService>, IManagementService
    {

        public ManagementServiceClient()
        {
        }

        public ManagementServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public ManagementServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public ManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public ManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region ProviderManagement



        public Kalitte.Sensors.Processing.Metadata.SensorProviderEntity[] GetSensorProviders()
        {
            return base.Channel.GetSensorProviders();
        }

        public Kalitte.Sensors.Processing.Metadata.SensorProviderEntity GetSensorProvider(string providerName)
        {
            return base.Channel.GetSensorProvider(providerName);
        }

        public SensorProviderEntity CreateSensorProvider(string name, string description, string type, ItemStartupType startup)
        {
            return base.Channel.CreateSensorProvider(name, description, type, startup);
        }

        public ProviderMetadata GetSensorProviderMetadata(string providerName)
        {
            return base.Channel.GetSensorProviderMetadata(providerName);
        }

        public void DeleteSensorProvider(string providerName)
        {
            this.Channel.DeleteSensorProvider(providerName);
        }

        public ProviderMetadata UpdateSensorProvider(string providerName, string description, string type, SensorProviderProperty properties)
        {
            return Channel.UpdateSensorProvider(providerName, description, type, properties);
        }

        public void ChangeProviderState(string providerName, ItemState newState)
        {
            base.Channel.ChangeProviderState(providerName, newState);
        }


        #endregion

        #region sensorManagement
        public Kalitte.Sensors.Processing.Metadata.SensorDeviceEntity[] GetSensorDevices()
        {
            return base.Channel.GetSensorDevices();
        }

        public Kalitte.Sensors.Processing.Metadata.SensorDeviceEntity[] GetSensorDevicesForProvider(string providerName)
        {
            return base.Channel.GetSensorDevicesForProvider(providerName);
        }


        public Kalitte.Sensors.Processing.Metadata.SensorDeviceEntity GetSensorDevice(string sensorName)
        {
            return base.Channel.GetSensorDevice(sensorName);
        }

        public void CreateSensor(string sensorName, string sensorId, string description, Kalitte.Sensors.Communication.ConnectionInformation connInfo, Kalitte.Sensors.Security.AuthenticationInformation authInfo, Kalitte.Sensors.Processing.ItemStartupType startup)
        {
            base.Channel.CreateSensor(sensorName, sensorId, description, connInfo, authInfo, startup);
        }

        public void ChangeSensorState(string sensorName, ItemState newState)
        {
            base.Channel.ChangeSensorState(sensorName, newState);
        }



        public void DeleteSensor(string sensorName)
        {
            base.Channel.DeleteSensor(sensorName);
        }

        public void UpdateSensor(string sensorName, string sensorId, string description, Kalitte.Sensors.Processing.Metadata.SensorDeviceProperty properties)
        {
            base.Channel.UpdateSensor(sensorName, sensorId, description, properties);
        }

        public Dictionary<string, PropertyList> GetSensorSources(string sensorName)
        {
            return base.Channel.GetSensorSources(sensorName);
        }

        public Dictionary<PropertyKey, DevicePropertyMetadata> GetSensorMetadata(string providerName)
        {
            return base.Channel.GetSensorMetadata(providerName);
        }

        public void SetSensorProfile(string sensorName, string source, PropertyList properties)
        {
            base.Channel.SetSensorProfile(sensorName, source, properties);
        }



        #endregion

        #region logicalSensorManagement

        public Kalitte.Sensors.Processing.Metadata.LogicalSensorEntity GetLogicalSensor(string logicalSensorName)
        {
            return base.Channel.GetLogicalSensor(logicalSensorName);
        }

        public LogicalSensorEntity[] GetLogicalSensors()
        {
            return base.Channel.GetLogicalSensors();
        }

        public Logical2SensorBindingEntity[] GetLogical2SensorBindings(string sensorDeviceName)
        {
            return base.Channel.GetLogical2SensorBindings(sensorDeviceName);
        }


        public void UpdateLogical2SensorBindings(string sensorDeviceName, Logical2SensorBindingEntity[] bindings)
        {
            base.Channel.UpdateLogical2SensorBindings(sensorDeviceName, bindings);
        }

        public LogicalSensorEntity CreateLogicalSensor(string logicalSensorName, string description, ItemStartupType startup)
        {
            return base.Channel.CreateLogicalSensor(logicalSensorName, description, startup);
        }

        public void ChangeLogicalSensorState(string logicalSensorName, ItemState newState)
        {
            base.Channel.ChangeLogicalSensorState(logicalSensorName, newState);
        }

        public void UpdateLogicalSensor(string logicalSensorName, string description, LogicalSensorProperty properties)
        {
            base.Channel.UpdateLogicalSensor(logicalSensorName, description, properties);
        }
        public void DeleteLogicalSensor(string logicalSensorName)
        {
            base.Channel.DeleteLogicalSensor(logicalSensorName);
        }

        public Logical2SensorBindingEntity[] GetSensor2LogicalBindings(string logicalSensorName)
        {
            return this.Channel.GetSensor2LogicalBindings(logicalSensorName);
        }

        #endregion

        #region processorManagement


        public void SetEventModuleProfile(string processor, string module, PropertyList properties)
        {
            Channel.SetEventModuleProfile(processor, module, properties);
        }

        public Kalitte.Sensors.Processing.Metadata.ProcessorEntity[] GetProcessors()
        {
            return base.Channel.GetProcessors();
        }

        public ProcessorEntity CreateProcessor(string processorName, string description, ItemStartupType startup)
        {
            return base.Channel.CreateProcessor(processorName, description, startup);
        }


        public ProcessorEntity GetProcessor(string processorName)
        {
            return Channel.GetProcessor(processorName);
        }

        public void DeleteProcessor(string processorName)
        {
            Channel.DeleteProcessor(processorName);
        }

        public void UpdateProcessor(string processorName, string description, ProcessorProperty properties)
        {
            Channel.UpdateProcessor(processorName, description, properties);
        }

        public void ChangeProcessorState(string processorName, ItemState newState)
        {
            Channel.ChangeProcessorState(processorName, newState);
        }

        public ProcessorMetadata GetProcessorMetadata(string processorName)
        {
            return Channel.GetProcessorMetadata(processorName);
        }

        public IEnumerable<Processor2ModuleBindingEntity> GetProcessor2ModuleBindings(string processorName)
        {
            return Channel.GetProcessor2ModuleBindings(processorName);
        }

        public void UpdateProcessor2ModuleBindings(string processorName, Processor2ModuleBindingEntity[] bindings)
        {
            Channel.UpdateProcessor2ModuleBindings(processorName, bindings);
        }

        public Logical2ProcessorBindingEntity[] GetProcessor2LogicalSensorBindings(string processorName)
        {
            return Channel.GetProcessor2LogicalSensorBindings(processorName);
        }

        public void UpdateProcessor2LogicalSensorBindings(string processorName, Logical2ProcessorBindingEntity[] bindings)
        {
            Channel.UpdateProcessor2LogicalSensorBindings(processorName, bindings);
        }

        #endregion

        #region eventModuleManagement


        public EventModuleEntity GetEventModule(string eventModuleName)
        {
            return Channel.GetEventModule(eventModuleName);
        }

        public void ChangeEventModuleState(string eventModuleName, ItemState newState)
        {
            Channel.ChangeEventModuleState(eventModuleName, newState);
        }

        public IEnumerable<EventModuleEntity> GetEventModules()
        {
            return base.Channel.GetEventModules();
        }

        public EventModuleEntity CreateEventModule(string eventModuleName, string description, string type, ItemStartupType startup)
        {
            return base.Channel.CreateEventModule(eventModuleName, description, type, startup);
        }

        public void DeleteEventModule(string eventModuleName)
        {
            Channel.DeleteEventModule(eventModuleName);
        }

        public void UpdateEventModule(string eventModuleName, string description, string type, EventModuleProperty properties)
        {
            Channel.UpdateEventModule(eventModuleName, description, type, properties);
        }

        public EventModuleMetadata GetEventModuleMetadata(string eventModuleName)
        {
            return Channel.GetEventModuleMetadata(eventModuleName);
        }

        #endregion

        #region dispatcher

        public void SetDispatcherProfile(string dispatcher, PropertyList properties)
        {
            Channel.SetDispatcherProfile(dispatcher, properties);
        }

        public Dispatcher2ProcessorBindingEntity[] GetDispatcher2ProcessorBindings(string dispatcherName)
        {
            return Channel.GetDispatcher2ProcessorBindings(dispatcherName);
        }

        public void UpdateDispatcher2ProcessorBindings(string dispatcherName, Dispatcher2ProcessorBindingEntity[] bindings)
        {
            Channel.UpdateDispatcher2ProcessorBindings(dispatcherName, bindings);
        }




        public DispatcherEntity[] GetDispatchers()
        {
            return Channel.GetDispatchers();
        }

        public DispatcherEntity GetDispatcher(string dispatcherName)
        {
            return Channel.GetDispatcher(dispatcherName);
        }

        public void ChangeDispatcherState(string dispatcherName, ItemState newState)
        {
            Channel.ChangeDispatcherState(dispatcherName, newState);
        }

        public DispatcherEntity CreateDispatcher(string dispatcherName, string description, string type, ItemStartupType startup)
        {
            return Channel.CreateDispatcher(dispatcherName, description, type, startup);
        }

        public void DeleteDispatcher(string dispatcherName)
        {
            Channel.DeleteDispatcher(dispatcherName);
        }

        public void UpdateDispatcher(string dispatcherName, string description, string type, DispatcherProperty properties)
        {
            Channel.UpdateDispatcher(dispatcherName, description, type, properties);
        }

        public DispatcherMetadata GetDispatcherMetadata(string dispatcherName)
        {
            return Channel.GetDispatcherMetadata(dispatcherName);
        }



        #endregion

        #region IManagementService Members


        public void UpdateSensorWithBindings(string sensorName, string sensorId, string description, SensorDeviceProperty properties, Logical2SensorBindingEntity[] bindings)
        {
            Channel.UpdateSensorWithBindings(sensorName, sensorId, description, properties, bindings);
        }

        public void UpdateProcessorWithBindings(string processorName, string description, ProcessorProperty properties, Processor2ModuleBindingEntity[] moduleBindings, Logical2ProcessorBindingEntity[] logicalSensorBindings)
        {
            Channel.UpdateProcessorWithBindings(processorName, description, properties, moduleBindings, logicalSensorBindings);
        }

        public void ChangeProcessorModuleState(string processorName, string moduleName, ItemState newState)
        {
            Channel.ChangeProcessorModuleState(processorName, moduleName, newState);
        }

        public void ChangeProcessorLogicalSensorBindingState(string processorName, string logicalSensorName, ItemState newState)
        {
            Channel.ChangeProcessorLogicalSensorBindingState(processorName, logicalSensorName, newState);
        }

        public void UpdateDispatcherWithBindings(string dispatcherName, string description, string type, DispatcherProperty properties, Dispatcher2ProcessorBindingEntity[] processorBindings)
        {
            Channel.UpdateDispatcherWithBindings(dispatcherName, description, type, properties, processorBindings);
        }

        public void ChangeDispatcherProcessorBindingState(string dispatcherName, string processorName, ItemState newState)
        {
            Channel.ChangeDispatcherProcessorBindingState(dispatcherName, processorName, newState);
        }

        #endregion

        #region general

        public ExtendedMetadata GetItemExtendedMetadata(ProcessingItem itemType)
        {
            return Channel.GetItemExtendedMetadata(itemType);
        }

        public Dictionary<PropertyKey, EntityMetadata> GetItemDefaultMetadata(ProcessingItem itemType, string itemName)
        {
            return Channel.GetItemDefaultMetadata(itemType, itemName);
        }

        public LogQueryResult GetItemLog(ProcessingItem itemType, string itemName, LogQuery query)
        {
            return Channel.GetItemLog(itemType, itemName, query);
        }

        public Dictionary<ProcessingItem, IEnumerable<string>> GetLogSources()
        {
            return Channel.GetLogSources();
        }


        public IList<LastEvent> GetLastEvents(ProcessingItem itemType, string itemName)
        {
            return Channel.GetLastEvents(itemType, itemName);
        }

        public void SetLastEventFilter(ProcessingItem itemType, string itemName, LastEventFilter filter)
        {
            Channel.SetLastEventFilter(itemType, itemName, filter);
        }

        public LastEventFilter GetLastEventFilter(ProcessingItem itemType, string itemName)
        {
            return Channel.GetLastEventFilter(itemType, itemName);
        }

        #endregion

        #region watch

        public NameDescriptionList GetServerWatcherCategoryNames(string watch, ServerAnalyseItem related)
        {
            return Channel.GetServerWatcherCategoryNames(watch, related);
        }

        public NameDescriptionList GetServerWatcherNames()
        {
            return Channel.GetServerWatcherNames();
        }

        public NameDescriptionList GetServerWatcherCategories(string watch)
        {
            return Channel.GetServerWatcherCategories(watch);
        }

        public NameDescriptionList GetServerWatcherInstanceNames(string watch, string category)
        {
            return Channel.GetServerWatcherInstanceNames(watch, category);
        }

        public NameDescriptionList GetServerWatcherMeasureNames(string watch, string category)
        {
            return Channel.GetServerWatcherMeasureNames(watch, category);
        }

        public float[] GetServerWatcherMeasureValues(string watch, string category, string instance, string[] measureNames)
        {
            return Channel.GetServerWatcherMeasureValues(watch, category, instance, measureNames);
        }

        #endregion

        #region IManagementService Members






        #endregion
    }


}


